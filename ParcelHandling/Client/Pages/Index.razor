@page "/"
@using ParcelHandling.Shared
@inject HttpClient Http

<PageTitle>ParcelHandling</PageTitle>

<nav class="navbar navbar-expand-lg navbar-dark bg-dark" data-bs-theme="dark">
    <div class="container-fluid">

        <a @onclick=@(e => SetCurrentDepartment(null)) class="navbar-brand" href="#">
            <img src="parcel.png" height="50" class="card-img-top" alt="Parcel">
        </a>

        <div class="collapse navbar-collapse" id="navbarSupportedContent">
            <ul class="navbar-nav me-auto mb-2 mb-lg-0">

                @if (_departments != null)
                {
                    foreach (var dept in _departments)
                    {
                        <li class="nav-item">
                            <a @onclick=@(e => SetCurrentDepartment(dept)) class="nav-link" href="#">@dept.Name</a>
                        </li>
                    }
                }

            </ul>
        </div>
    </div>
</nav>
    
<div>

    @if (_currentDepartment != null)
    {
        <h1>Welcome to department @_currentDepartment.Name!</h1>

        @if (_parcelsOfCurrentDepartment != null && _parcelsOfCurrentDepartment.Any())
        {
            <p>
                The following parcels are waiting to be handled:
            </p>
            
            <div class="row row-cols-3 row-cols-md-2 g-4">

                @foreach (var parcel in _parcelsOfCurrentDepartment)
                {
                    <ParcelComponent Parcel=parcel Actions=_currentDepartment.Actions OnHandled=RefreshParcelsOfCurrentDepartment />
                }

            </div>
        }
        else
        {
            <div>No parcels found.</div>
        }
    }
    else
    {
        <h1>Welcome to Generic Parcel Handling</h1>
        <p>
            Choose a department from the menu to browse parcels waiting to be handled.
        </p>

        <h1>Demo</h1>
        <p>
            Click <a @onclick=@(e => ResetApplication()) class="btn btn-danger">Here</a> if you wish to reset the system (for demo purposes).
        </p>
    }

</div>

@code {

    private Department[]? _departments;
    private Department? _currentDepartment;
    private IEnumerable<Parcel>? _parcelsOfCurrentDepartment;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _departments = await Http.GetFromJsonAsync<Department[]>("Department");
        }
        catch (Exception)
        {
            _departments = Array.Empty<Department>();
        }
    }

    private async Task SetCurrentDepartment(Department? department)
    {
        _currentDepartment = department;
        await RefreshParcelsOfCurrentDepartment();
    }

    private async Task RefreshParcelsOfCurrentDepartment()
    {
        if (_currentDepartment != null)
        {
            try
            {
                _parcelsOfCurrentDepartment = await Http.GetFromJsonAsync<Parcel[]>($"Parcel/{_currentDepartment.Name}");
            }
            catch (Exception)
            {
                Console.WriteLine("There was an issue retriving parcels");
                _parcelsOfCurrentDepartment = Array.Empty<Parcel>();
            }
        }
        else
        {
            _parcelsOfCurrentDepartment = Array.Empty<Parcel>();
        }

        StateHasChanged();
    }

    private async Task ResetApplication()
    {
        try
        {
            await Http.DeleteAsync("App");
        }
        catch (Exception)
        {
            Console.WriteLine("There was an issue resetting the application");
            _parcelsOfCurrentDepartment = Array.Empty<Parcel>();
        }
    }
}
